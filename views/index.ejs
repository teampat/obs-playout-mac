<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            dark: {
              50: '#f8fafc',
              100: '#f1f5f9',
              200: '#e2e8f0',
              300: '#cbd5e1',
              400: '#94a3b8',
              500: '#64748b',
              600: '#475569',
              700: '#334155',
              800: '#1e293b',
              900: '#0f172a',
            }
          }
        }
      }
    }
  </script>
  <style>
    /* Custom animations and touch optimizations */
    .animate-press {
      transition: transform 0.1s ease;
    }
    .animate-press:active {
      transform: scale(0.95);
    }
    
    /* Smooth transitions */
    * {
      transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
    }
    
    /* Loading animation */
    .loading-spin {
      animation: spin 1s linear infinite;
    }
    
    .border-3 {
      border-width: 3px;
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .animate-pulse {
      animation: pulse 1.5s infinite;
    }
    
    /* Card hover effects */
    .bg-dark-750 {
      background-color: rgb(41 50 65);
    }

    /* SVG Icon Styles */
    .icon {
      width: 20px;
      height: 20px;
      fill: currentColor;
      display: inline-block;
      vertical-align: middle;
    }
    
    .icon-lg {
      width: 24px;
      height: 24px;
    }
    
    .icon-sm {
      width: 16px;
      height: 16px;
    }
    
    /* Screen reader only text */
    .sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border: 0;
    }
    
    /* Video player button hover effects */
    .group:hover .icon {
      filter: drop-shadow(0 0 4px rgba(255, 255, 255, 0.3));
    }
    
    /* Fix iOS hover state persistence */
    @media (hover: none) and (pointer: coarse) {
      .group:hover {
        background-color: inherit !important;
      }
      
      .bg-dark-700\/80:hover {
        background-color: rgba(51, 65, 85, 0.8) !important;
      }
      
      .hover\:bg-yellow-600:hover {
        background-color: rgba(51, 65, 85, 0.8) !important;
      }
      
      .hover\:bg-red-600:hover {
        background-color: rgba(51, 65, 85, 0.8) !important;
      }
      
      .hover\:bg-dark-600:hover {
        background-color: rgba(51, 65, 85, 0.8) !important;
      }
      
      .hover\:bg-white:hover {
        background-color: rgba(255, 255, 255, 0.9) !important;
      }
    }
    
    /* Fix iOS progress bar background disappearing after seek */
    #progressBarContainer {
      background-color: rgba(0, 0, 0, 0.4) !important;
      border-radius: 9999px !important;
      position: relative !important;
      overflow: hidden !important;
    }
    
    /* Backup background layer for iOS */
    #progressBarContainer::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.4);
      border-radius: 9999px;
      z-index: -1;
      pointer-events: none;
    }
    
    /* Ensure progress bar styling is maintained on touch devices */
    @media (hover: none) and (pointer: coarse) {
      #progressBarContainer {
        background-color: rgb(51 65 85) !important;
        -webkit-appearance: none !important;
        appearance: none !important;
        -webkit-tap-highlight-color: transparent !important;
      }
      
      #progressBarContainer::before {
        background-color: rgb(51 65 85) !important;
      }
    }
    
    /* Progress bar and thumb z-index layering */
    #progressBar {
      z-index: 1;
      position: relative;
    }
    
    #progressThumb {
      z-index: 10 !important;
      position: absolute !important;
    }
    
    /* Ensure thumb stays on top during interactions */
    #progressBarContainer:active #progressThumb,
    #progressBarContainer:hover #progressThumb {
      z-index: 20 !important;
    }
  </style>

  <!-- SVG Icon Definitions -->
  <svg style="display: none;">
    <defs>
      <!-- Play Icon -->
      <symbol id="icon-play" viewBox="0 0 24 24">
        <path d="M8 5v14l11-7z"/>
      </symbol>
      
      <!-- Pause Icon -->
      <symbol id="icon-pause" viewBox="0 0 24 24">
        <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"/>
      </symbol>
      
      <!-- Stop Icon -->
      <symbol id="icon-stop" viewBox="0 0 24 24">
        <path d="M6 6h12v12H6z"/>
      </symbol>
      
      <!-- Rewind/Seek Back Icon -->
      <symbol id="icon-rewind" viewBox="0 0 24 24">
        <path d="M11 18V6l-8.5 6 8.5 6zm.5-6l8.5 6V6l-8.5 6z"/>
      </symbol>
      
      <!-- Fast Forward/Seek Forward Icon -->
      <symbol id="icon-fastforward" viewBox="0 0 24 24">
        <path d="M4 18l8.5-6L4 6v12zm9-12v12l8.5-6L13 6z"/>
      </symbol>
      
      <!-- Restart Icon -->
      <symbol id="icon-restart" viewBox="0 0 24 24">
        <path d="M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"/>
      </symbol>
      
      <!-- Video/Movie Icon -->
      <symbol id="icon-video" viewBox="0 0 24 24">
        <path d="M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z"/>
      </symbol>
      
      <!-- Image Icon -->
      <symbol id="icon-image" viewBox="0 0 24 24">
        <path d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z"/>
      </symbol>
      
      <!-- Library/Folder Icon -->
      <symbol id="icon-library" viewBox="0 0 24 24">
        <path d="M10 4H4c-1.11 0-2 .89-2 2v12c0 1.11.89 2 2 2h16c1.11 0 2-.89 2-2V8c0-1.11-.89-2-2-2h-8l-2-2z"/>
      </symbol>
      
      <!-- Eye/Preview Icon -->
      <symbol id="icon-preview" viewBox="0 0 24 24">
        <path d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>
      </symbol>
      
      <!-- Search/Magnifying Glass Icon -->
      <symbol id="icon-search" viewBox="0 0 24 24">
        <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
      </symbol>
      
      <!-- Close/X Icon -->
      <symbol id="icon-close" viewBox="0 0 24 24">
        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
      </symbol>
      
      <!-- Settings/Gear Icon -->
      <symbol id="icon-settings" viewBox="0 0 24 24">
        <path d="M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z"/>
      </symbol>
      
      <!-- Fullscreen Icon -->
      <symbol id="icon-fullscreen" viewBox="0 0 24 24">
        <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/>
      </symbol>
    </defs>
  </svg>
</head>
<body class="dark bg-dark-900 text-white min-h-screen">
  <div class="container mx-auto px-4 py-6 max-w-7xl">
    <%- include('partials/header') %>

    <!-- Video Progress Bar - Fixed Overlay -->

    <div id="progressContainer" class="hidden fixed top-0 left-0 right-0 z-50 bg-black/70 backdrop-blur-sm border-b border-gray-800 p-4 transition-all duration-300">
      <div class="container mx-auto max-w-7xl">
        <!-- Collapsed State -->
        <div id="progressCollapsed" class="hidden flex items-center justify-between">
          <span id="currentVideoNameCollapsed" class="text-white font-semibold text-sm truncate flex-1 mr-4">No video playing</span>
          <div class="flex items-center gap-3">
            <div id="progressBarMini" class="w-20 bg-dark-700 rounded-full h-2 relative">
              <div id="progressBarMiniInner" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
            </div>
            <span id="timeDisplayCollapsed" class="text-gray-300 text-xs font-mono whitespace-nowrap">00:00</span>
            <button id="expandBtn" class="text-gray-400 hover:text-white transition-colors p-1" title="ขยาย">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Expanded State -->
        <div id="progressExpanded">
          <div class="flex items-center justify-between mb-3">
            <span id="currentVideoName" class="text-white font-semibold text-base md:text-lg">No video playing</span>
            <div class="flex items-center gap-3">
              <span id="timeDisplay" class="text-gray-300 text-base md:text-lg font-mono">00:00 / 00:00</span>
              <button id="collapseBtn" class="text-gray-400 hover:text-white transition-colors p-1" title="พับ">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
                </svg>
              </button>
            </div>
          </div>
          </div>
        </div>
        
        <!-- Expanded State Controls -->
        <div id="progressExpandedControls">
          <div class="w-full bg-dark-700 rounded-full h-6 md:h-8 mb-4 cursor-pointer relative transition-all duration-200 group" id="progressBarContainer" title="แตะเพื่อเลื่อน">
            <div id="progressBar" class="bg-blue-600 h-6 md:h-8 rounded-full transition-all duration-300 relative" style="width: 0%">
              <!-- Thumb - positioned at the end of progress, same height as progress bar -->
              <div id="progressThumb" class="absolute top-1/2 -translate-y-1/2 w-6 h-6 md:w-8 md:h-8 bg-blue-500 border-2 border-white rounded-full shadow-xl opacity-100 transition-transform active:scale-90 touch-manipulation" style="left: calc(100% - 12px); touch-action: none;"></div>
            </div>
          </div>
          <div class="flex items-center justify-center gap-3 mt-4 flex-wrap">
            <!-- Seek Back Button -->
            <button id="seekBackBtn" class="bg-dark-700/80 hover:bg-dark-600 active:scale-90 text-white w-16 h-16 rounded-full flex items-center justify-center transition-all shadow-lg touch-manipulation backdrop-blur-sm border border-dark-600 group" title="Seek back 10 seconds">
              <svg class="icon icon-lg group-hover:scale-110 transition-transform"><use href="#icon-rewind"></use></svg>
              <span class="sr-only">-10s</span>
            </button>
            
            <!-- Restart Button -->
            <button id="restartBtn" class="bg-dark-700/80 hover:bg-yellow-600 active:scale-90 text-white w-14 h-14 rounded-full flex items-center justify-center transition-all shadow-lg touch-manipulation backdrop-blur-sm border border-dark-600 group" title="Restart video">
              <svg class="icon icon-lg group-hover:scale-110 transition-transform"><use href="#icon-restart"></use></svg>
              <span class="sr-only">Restart</span>
            </button>
            
            <!-- Play/Pause Button - Larger and more prominent -->
            <button id="playPauseBtn" class="bg-white/90 hover:bg-white active:scale-90 text-dark-900 w-20 h-20 rounded-full flex items-center justify-center transition-all shadow-xl touch-manipulation ml-3 mr-3 group" title="Play/Pause">
              <svg id="playPauseIcon" class="icon icon-lg group-hover:scale-110 transition-transform ml-0.5"><use href="#icon-pause"></use></svg>
              <span id="playPauseText" class="sr-only">Pause</span>
            </button>
            
            <!-- Stop Button -->
            <button id="stopBtn" class="bg-dark-700/80 hover:bg-red-600 active:scale-90 text-white w-14 h-14 rounded-full flex items-center justify-center transition-all shadow-lg touch-manipulation backdrop-blur-sm border border-dark-600 group" title="Stop video">
              <svg class="icon icon-lg group-hover:scale-110 transition-transform"><use href="#icon-stop"></use></svg>
              <span class="sr-only">Stop</span>
            </button>
            
            <!-- Seek Forward Button -->
            <button id="seekForwardBtn" class="bg-dark-700/80 hover:bg-dark-600 active:scale-90 text-white w-16 h-16 rounded-full flex items-center justify-center transition-all shadow-lg touch-manipulation backdrop-blur-sm border border-dark-600 group" title="Seek forward 10 seconds">
              <svg class="icon icon-lg group-hover:scale-110 transition-transform"><use href="#icon-fastforward"></use></svg>
              <span class="sr-only">+10s</span>
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Library Section -->
    <section>
      <h3 class="text-lg font-semibold mb-6 text-white flex items-center gap-2">
        <svg class="icon icon-lg"><use href="#icon-library"></use></svg>
        <span>Media Library</span>
      </h3>
      <div id="grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">
        <!-- Media items will be inserted here -->
      </div>
      
      <!-- Empty State -->
      <div id="emptyState" class="hidden text-center py-12">
        <div class="text-6xl mb-4">📂</div>
        <h3 class="text-xl font-medium text-dark-300 mb-2">No media files found</h3>
        <p class="text-dark-400">Add video or image files to your media directory to get started.</p>
      </div>
    </section>
  </div>

  <!-- Settings Modal -->
  <div id="settingsModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-800 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-xl font-bold text-white flex items-center gap-2">
          <svg class="icon icon-lg"><use href="#icon-settings"></use></svg>
          Application Settings
        </h2>
        <button id="closeSettingsBtn" class="text-gray-400 hover:text-white text-2xl">&times;</button>
      </div>
      
      <form id="settingsForm" class="space-y-4">
        <div class="grid grid-cols-1 gap-4">
          <!-- Media Directory -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-2">
              <svg class="icon icon-sm"><use href="#icon-library"></use></svg>
              Media Directory
            </label>
            <input type="text" id="mediaDir" name="MEDIA_DIR" required
                   class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
                   placeholder="/path/to/media/folder">
            <small class="text-gray-400 text-xs mt-1 block">Local directory where media files are stored</small>
          </div>
          
          <!-- OBS Settings -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-2">
              <svg class="icon icon-sm"><use href="#icon-video"></use></svg>
              OBS WebSocket URL
            </label>
            <input type="text" id="obsUrl" name="OBS_URL" required placeholder="ws://127.0.0.1:4455"
                   class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none">
            <small class="text-gray-400 text-xs mt-1 block">OBS WebSocket server address</small>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2 flex items-center gap-2">
              <svg class="icon icon-sm"><use href="#icon-settings"></use></svg>
              OBS Password
            </label>
            <input type="password" id="obsPassword" name="OBS_PASSWORD" 
                   class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
                   placeholder="Leave blank if no password">
            <small class="text-gray-400 text-xs mt-1 block">OBS WebSocket password (optional)</small>
          </div>
        </div>
        
        <div class="flex gap-3 pt-4">
          <button type="submit" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-all flex items-center justify-center gap-2">
            <svg class="icon icon-sm"><use href="#icon-settings"></use></svg>
            Save Settings
          </button>
          <button type="button" id="cancelSettingsBtn" class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-3 px-4 rounded-lg transition-all flex items-center justify-center gap-2">
            <svg class="icon icon-sm"><use href="#icon-close"></use></svg>
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    // Initialize WebSocket connection
    const socket = io();
    
    // Global state tracking
    let currentPlayingPath = null;
    let currentPlayingType = null;
    let obsConnected = false;
    let progressInterval = null;
    let currentVideoInfo = null;
    let lastMediaGridState = null; // Track last media grid state to prevent unnecessary re-renders
    let progressBarCollapsed = false; // Track progress bar collapse state

    // WebSocket event handlers
    socket.on('connect', () => {
      console.log('[WebSocket] Connected to server');
      // Request current status
      socket.emit('requestStatus');
    });

    socket.on('disconnect', () => {
      console.log('[WebSocket] Disconnected from server');
      // Update UI to show disconnected state
      updateOBSStatus(false);
    });

    socket.on('obsStatus', (data) => {
      console.log('[WebSocket] OBS status update:', data);
      updateOBSStatus(data.connected);
    });

    socket.on('currentPlaying', (data) => {
      console.log('[WebSocket] Current playing update:', data);
      
      // Update global state
      currentPlayingPath = data.filePath;
      currentPlayingType = data.type;
      
      // Update UI
      updateCurrentPlayingDisplay(data);
      
      // Update media grid to show active states
      updateActiveStatesOnly();
      
      // Handle progress bar visibility based on server state
      if (data.progressBarVisible) {
        showProgressBar();
      } else {
        hideProgressBar();
      }
    });

    socket.on('videoProgress', (data) => {
      if (!obsConnected || currentPlayingType !== 'video') {
        return;
      }
      
      console.log('[WebSocket] Video progress update:', data);
      
      if (data.ok) {
        const progressContainer = document.getElementById('progressContainer');
        const playPauseBtn = document.getElementById('playPauseBtn');
        
        // Show progress bar if there's any video loaded (even if not playing)
        if (data.mediaDuration > 0) {
          showProgressBar();
          
          // Convert milliseconds to seconds
          const currentTime = data.mediaCursor / 1000;
          const totalTime = data.mediaDuration / 1000;
          
          updateProgressBar(currentTime, totalTime);
          
          // Update play/pause button based on state
          const playPauseIcon = document.getElementById('playPauseIcon');
          const playPauseText = document.getElementById('playPauseText');
          
          if (data.mediaState === "OBS_MEDIA_STATE_PLAYING") {
            playPauseIcon.innerHTML = '<use href="#icon-pause"></use>';
            playPauseText.textContent = "Pause";
            playPauseBtn.setAttribute('data-action', 'pause');
          } else if (data.mediaState === "OBS_MEDIA_STATE_PAUSED") {
            playPauseIcon.innerHTML = '<use href="#icon-play"></use>';
            playPauseText.textContent = "Resume";
            playPauseBtn.setAttribute('data-action', 'play');
          } else if (data.mediaState === "OBS_MEDIA_STATE_STOPPED") {
            playPauseIcon.innerHTML = '<use href="#icon-play"></use>';
            playPauseText.textContent = "Start";
            playPauseBtn.setAttribute('data-action', 'play');
          } else {
            playPauseIcon.innerHTML = '<use href="#icon-play"></use>';
            playPauseText.textContent = "Start";
            playPauseBtn.setAttribute('data-action', 'play');
          }
        } else if (currentPlayingType === 'video') {
          // Video source exists but no media loaded yet - keep current button state
          showProgressBar();
          updateProgressBar(0, 0);
          // Don't change button state here - let it stay as set when video was selected
        } else {
          // No video playing
          hideProgressBar();
        }
      }
    });

    // Function to fetch current playing media information (now using WebSocket)
    async function fetchCurrentPlaying() {
      // This is now handled by WebSocket events, but keeping for backward compatibility
      socket.emit('requestStatus');
    }

    // Function to update the display of current playing media
    function updateCurrentPlayingDisplay(current) {
      console.log('Updating current playing display:', current);
      const currentVideoName = document.getElementById('currentVideoName');
      const currentVideoNameCollapsed = document.getElementById('currentVideoNameCollapsed');
      
      if (current) {
        let displayText = '';
        if (current.type === 'video') {
          displayText = `🎬 ${current.filename}`;
          // Remove duration display from progress bar - show only filename
        } else if (current.type === 'image') {
          displayText = `🖼️ ${current.filename}`;
        }
        
        console.log('Setting display text:', displayText);
        currentVideoName.textContent = displayText;
        currentVideoNameCollapsed.textContent = displayText;
        
        // Show progress bar for videos
        if (current.type === 'video') {
          showProgressBar();
        }
      } else {
        console.log('No current playing media, setting to default text');
        currentVideoName.textContent = 'ไม่มีสื่อที่เล่นอยู่';
        currentVideoNameCollapsed.textContent = 'ไม่มีสื่อที่เล่นอยู่';
      }
    }

    // Progress tracking functions
    function formatTime(seconds) {
      if (!seconds || isNaN(seconds)) return "00:00";
      const mins = Math.floor(seconds / 60);
      const secs = Math.floor(seconds % 60);
      return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
    }

    function updateProgressBar(current, total) {
      const progressBar = document.getElementById('progressBar');
      const progressThumb = document.getElementById('progressThumb');
      const timeDisplay = document.getElementById('timeDisplay');
      const timeDisplayCollapsed = document.getElementById('timeDisplayCollapsed');
      const progressBarMiniInner = document.getElementById('progressBarMiniInner');
      
      // Update last known time for seek functionality
      updateLastKnownTime(current * 1000); // Convert seconds to milliseconds
      
      if (total > 0) {
        const percentage = (current / total) * 100;
        const containerWidth = document.getElementById('progressBarContainer')?.offsetWidth || 300;
        // Match thumb size with progress bar height - responsive
        const progressBarHeight = document.getElementById('progressBar')?.offsetHeight || 24;
        const thumbSize = progressBarHeight; // Same as progress bar height
        
        // Calculate thumb position within container bounds
        const thumbPosition = Math.max(thumbSize/2, Math.min(containerWidth - thumbSize/2, (percentage / 100) * containerWidth));
        
        // Progress bar width extends to the right edge of the thumb
        const thumbRightEdge = thumbPosition + thumbSize/2;
        const progressWidth = (thumbRightEdge / containerWidth) * 100;
        progressBar.style.width = `${Math.min(progressWidth, 100)}%`;
        
        // Position thumb
        if (progressThumb) {
          progressThumb.style.left = `${thumbPosition - thumbSize/2}px`;
          progressThumb.style.position = 'absolute';
          progressThumb.style.zIndex = '10';
        }
        
        // Update mini progress bar
        if (progressBarMiniInner) {
          progressBarMiniInner.style.width = `${percentage}%`;
        }
        
        timeDisplay.textContent = `${formatTime(current)} / ${formatTime(total)}`;
        timeDisplayCollapsed.textContent = formatTime(current);
      } else {
        // Reset to start position (0%)
        const containerWidth = document.getElementById('progressBarContainer')?.offsetWidth || 300;
        // Match thumb size with progress bar height
        const progressBarHeight = document.getElementById('progressBar')?.offsetHeight || 24;
        const thumbSize = progressBarHeight;
        const startThumbPosition = thumbSize/2; // At left edge
        
        // Progress bar width extends to the center of the thumb at start position
        const startProgressWidth = (startThumbPosition / containerWidth) * 100;
        progressBar.style.width = `${startProgressWidth}%`;
        
        // Reset thumb to start position
        if (progressThumb) {
          progressThumb.style.left = `0px`; // At left edge
          progressThumb.style.zIndex = '10';
        }
        
        // Reset mini progress bar
        if (progressBarMiniInner) {
          progressBarMiniInner.style.width = '0%';
        }
        
        timeDisplay.textContent = '00:00 / 00:00';
        timeDisplayCollapsed.textContent = '00:00';
      }
    }

    // Note: checkVideoProgress is now handled by WebSocket events
    // The old polling-based approach has been replaced with real-time updates

    function hideProgressBar() {
      document.getElementById('progressContainer').classList.add('hidden');
      // Remove body padding when progress bar is hidden
      document.body.style.paddingTop = '0';
    }

    function showProgressBar() {
      const progressContainer = document.getElementById('progressContainer');
      progressContainer.classList.remove('hidden');
      
      // Apply collapse state
      updateProgressBarLayout();
      
      // Add body padding when progress bar is shown
      const paddingTop = progressBarCollapsed ? '60px' : '120px';
      document.body.style.paddingTop = paddingTop;
    }

    // Progress bar collapse/expand functions
    function collapseProgressBar() {
      progressBarCollapsed = true;
      localStorage.setItem('progressBarCollapsed', 'true');
      updateProgressBarLayout();
      document.body.style.paddingTop = '60px';
    }

    function expandProgressBar() {
      progressBarCollapsed = false;
      localStorage.setItem('progressBarCollapsed', 'false');
      updateProgressBarLayout();
      document.body.style.paddingTop = '120px';
    }

    function updateProgressBarLayout() {
      const progressCollapsed = document.getElementById('progressCollapsed');
      const progressExpanded = document.getElementById('progressExpanded');
      const progressExpandedControls = document.getElementById('progressExpandedControls');
      
      if (progressBarCollapsed) {
        progressCollapsed.classList.remove('hidden');
        progressExpanded.classList.add('hidden');
        progressExpandedControls.classList.add('hidden');
      } else {
        progressCollapsed.classList.add('hidden');
        progressExpanded.classList.remove('hidden');
        progressExpandedControls.classList.remove('hidden');
      }
    }

    // Progress bar click handler for seeking - Simple and safe approach
    function handleProgressBarClick(e) {
      console.log('Click detected at coordinates:', e.clientX, e.clientY);
      console.log('Click target:', e.target);
      console.log('Closest progress bar container:', e.target.closest('#progressBarContainer'));
      
      if (!obsConnected || currentPlayingType !== 'video') {
        console.log('Cannot seek: OBS not connected or no video playing', {obsConnected, currentPlayingType});
        return;
      }
      
      // Make sure we're clicking on the progress bar container
      const progressBarContainer = e.target.closest('#progressBarContainer');
      if (!progressBarContainer) {
        console.log('Click not on progress bar container');
        return;
      }
      
      console.log('Progress bar clicked, attempting seek...');
      console.log('Progress bar container element:', progressBarContainer);
      
      // Get current video status to know total duration
      fetch('/obs/progress')
        .then(res => res.json())
        .then(data => {
          console.log('Progress data:', data);
          if (data.ok && data.mediaDuration > 0) {
            const rect = progressBarContainer.getBoundingClientRect();
            console.log('Progress bar rect:', rect);
            if (!rect || rect.width === 0) {
              console.error('Could not get progress bar bounds or width is 0');
              return;
            }
            
            const clickX = e.clientX - rect.left;
            const percentage = Math.max(0, Math.min(1, clickX / rect.width));
            const seekTimeMs = Math.floor(percentage * data.mediaDuration);
            const seekTimeSeconds = Math.floor(seekTimeMs / 1000);
            
            console.log(`Seeking to ${percentage * 100}% (${seekTimeMs}ms = ${seekTimeSeconds}s)`);
            
            // Seek to the clicked position
            fetch('/obs/seek', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ timeMs: seekTimeMs })
            })
            .then(res => res.json())
            .then(seekData => {
              console.log('Seek response:', seekData);
              if (seekData.ok) {
                // WebSocket will handle progress updates automatically
                // No need for manual progress checks
              } else {
                showToast('❌ Failed to seek: ' + (seekData.error || 'unknown'), 'error');
              }
            })
            .catch(error => {
              console.error('Seek request error:', error);
              showToast('❌ Seek request error: ' + error.message, 'error');
            });
          } else {
            throw new Error('No video duration available');
          }
        })
        .catch(error => {
          console.error('Progress fetch error:', error);
          showToast('❌ Progress fetch error: ' + error.message, 'error');
        });
    }

    // LocalStorage Settings Management
    const LOCAL_STORAGE_KEYS = ['MEDIA_DIR', 'OBS_URL', 'OBS_PASSWORD', 'OBS_TARGET_SCENE'];
    
    function saveToLocalStorage(settings) {
      LOCAL_STORAGE_KEYS.forEach(key => {
        if (settings[key] !== undefined) {
          localStorage.setItem(key, settings[key]);
        }
      });
    }
    
    function loadFromLocalStorage() {
      const settings = {};
      LOCAL_STORAGE_KEYS.forEach(key => {
        const value = localStorage.getItem(key);
        if (value) {
          settings[key] = value;
        }
      });
      return settings;
    }
    
    // Apply localStorage settings on page load
    async function applyLocalStorageSettings() {
      const localSettings = loadFromLocalStorage();
      if (Object.keys(localSettings).length > 0) {
        try {
          await fetch('/api/settings/localStorage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(localSettings)
          });
        } catch (error) {
          console.log('Failed to apply localStorage settings:', error);
        }
      }
    }

    // OBS Status Functions (now using WebSocket updates)
    async function checkOBSStatus() {
      // This is now handled by WebSocket events, but keeping for manual checks
      try {
        const res = await fetch('/obs/status');
        const data = await res.json();
        updateOBSStatus(data.connected);
      } catch (error) {
        updateOBSStatus(false);
      }
    }

    function updateOBSStatus(connected) {
      obsConnected = connected;
      const indicator = document.getElementById('obsIndicator');
      const statusText = document.getElementById('obsStatusText');
      const connectBtn = document.getElementById('obsConnectBtn');
      const disconnectBtn = document.getElementById('obsDisconnectBtn');
      const sceneSelector = document.getElementById('sceneSelector');
      
      if (connected) {
        indicator.className = 'w-2 h-2 rounded-full bg-green-500 animate-pulse';
        statusText.textContent = 'OBS Connected';
        statusText.className = 'text-green-400';
        connectBtn.classList.add('hidden');
        disconnectBtn.classList.remove('hidden');
        sceneSelector.classList.remove('hidden');
        
        // Load scenes when connected
        loadScenes();
        
        // WebSocket now handles progress tracking automatically
      } else {
        indicator.className = 'w-2 h-2 rounded-full bg-red-500';
        statusText.textContent = 'OBS Disconnected';
        statusText.className = 'text-red-400';
        connectBtn.classList.remove('hidden');
        connectBtn.textContent = 'Connect to OBS';
        disconnectBtn.classList.add('hidden');
        sceneSelector.classList.add('hidden');
        
        // Clear scene options when disconnected
        const targetScene = document.getElementById('targetScene');
        if (targetScene) {
          targetScene.innerHTML = '<option value="">Select scene...</option>';
        }
        
        // WebSocket now handles progress tracking automatically
      }
    }

    // Connect to OBS
    document.getElementById('obsConnectBtn').addEventListener('click', async () => {
      const btn = document.getElementById('obsConnectBtn');
      const originalText = btn.textContent;
      
      btn.disabled = true;
      btn.textContent = 'Connecting...';
      
      try {
        const res = await fetch('/obs/connect', { method: 'POST' });
        const data = await res.json();
        
        if (data.ok) {
          showToast('Connected: ' + data.message, 'success');
          checkOBSStatus(); // Refresh status
        } else {
          showToast('Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
        btn.textContent = originalText;
      }
    });

    // Disconnect from OBS
    document.getElementById('obsDisconnectBtn').addEventListener('click', async () => {
      const btn = document.getElementById('obsDisconnectBtn');
      const originalText = btn.textContent;
      
      btn.disabled = true;
      btn.textContent = 'Disconnecting...';
      
      try {
        const res = await fetch('/obs/disconnect', { method: 'POST' });
        const data = await res.json();
        
        if (data.ok) {
          showToast('Disconnected: ' + data.message, 'success');
          checkOBSStatus(); // Refresh status
        } else {
          showToast('Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
        btn.textContent = originalText;
      }
    });

    // OBS status is now handled by WebSocket events
    // Keeping initial check for fallback
    checkOBSStatus();

    // Scene selector change handler
    document.getElementById('targetScene').addEventListener('change', async (e) => {
      const selectedScene = e.target.value;
      if (selectedScene) {
        // Save to localStorage
        localStorage.setItem('OBS_TARGET_SCENE', selectedScene);
        
        try {
          // Update server CONFIG
          const res = await fetch('/api/settings/localStorage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ OBS_TARGET_SCENE: selectedScene })
          });
          
          const data = await res.json();
          if (data.ok) {
            if (selectedScene === 'CURRENT_SCENE') {
              showToast('Target scene set to: Current Scene', 'success');
            } else {
              showToast(`Target scene set to: ${selectedScene}`, 'success');
            }
          } else {
            showToast('Failed to update target scene on server', 'error');
          }
        } catch (error) {
          console.error('Error updating target scene:', error);
          showToast('Network error updating target scene', 'error');
        }
      }
    });

    // Settings Modal Functions
    const settingsModal = document.getElementById('settingsModal');
    const settingsForm = document.getElementById('settingsForm');
    
    document.getElementById('settingsBtn').addEventListener('click', async () => {
      await loadSettings();
      settingsModal.classList.remove('hidden');
    });

    document.getElementById('closeSettingsBtn').addEventListener('click', () => {
      settingsModal.classList.add('hidden');
    });

    document.getElementById('cancelSettingsBtn').addEventListener('click', () => {
      settingsModal.classList.add('hidden');
    });

    // Close modal when clicking outside
    settingsModal.addEventListener('click', (e) => {
      if (e.target === settingsModal) {
        settingsModal.classList.add('hidden');
      }
    });

    // Save settings
    settingsForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(settingsForm);
      const settings = {};
      
      for (let [key, value] of formData.entries()) {
        settings[key] = value;
      }
      
      const submitBtn = settingsForm.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = '💾 Saving...';
      
      try {
        const res = await fetch('/api/settings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(settings)
        });
        
        const data = await res.json();
        
        if (data.ok) {
          // Save localStorage settings to browser
          if (data.localStorageSettings) {
            saveToLocalStorage(data.localStorageSettings);
          }
          
          showToast('✅ Settings saved successfully!', 'success');
          settingsModal.classList.add('hidden');
          
          // Refresh page after 2 seconds to apply new settings
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showToast('❌ Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });

    // Settings Modal Functions
    async function loadSettings() {
      try {
        const res = await fetch('/api/settings');
        const data = await res.json();
        
        if (data.ok) {
          const settings = data.settings;
          document.getElementById('mediaDir').value = settings.MEDIA_DIR || '';
          document.getElementById('obsUrl').value = settings.OBS_URL || '';
          document.getElementById('obsPassword').value = settings.OBS_PASSWORD || '';
        }
      } catch (error) {
        showToast('❌ Failed to load settings: ' + error.message, 'error');
      }
    }

    async function loadScenes() {
      try {
        const res = await fetch('/obs/scenes');
        const data = await res.json();
        
        if (data.ok) {
          const targetScene = document.getElementById('targetScene');
          const currentValue = localStorage.getItem('OBS_TARGET_SCENE') || '';
          
          // Clear existing options and add "Current Scene" as default
          targetScene.innerHTML = `<option value="CURRENT_SCENE">Current Scene (${data.currentScene})</option>`;

          // Set default selection if no saved value
          if (!currentValue) {
            targetScene.value = 'CURRENT_SCENE';
          }

          // Add scene options
          data.scenes.forEach(scene => {
            const option = document.createElement('option');
            option.value = scene.name;
            option.textContent = scene.name;
            if (scene.name === currentValue) {
              option.selected = true;
            }
            targetScene.appendChild(option);
          });
          
          // Scene is already saved to localStorage, no need to update CONFIG here
        } else {
          console.error('Failed to load scenes:', data.error);
        }
      } catch (error) {
        console.error('Error loading scenes:', error);
      }
    }

    // Settings Modal Event Listeners
    document.getElementById('settingsBtn').addEventListener('click', () => {
      loadSettings();
      document.getElementById('settingsModal').classList.remove('hidden');
    });

    document.getElementById('closeSettingsBtn').addEventListener('click', () => {
      document.getElementById('settingsModal').classList.add('hidden');
    });

    document.getElementById('cancelSettingsBtn').addEventListener('click', () => {
      document.getElementById('settingsModal').classList.add('hidden');
    });

    // Close modal when clicking outside
    document.getElementById('settingsModal').addEventListener('click', (e) => {
      if (e.target.id === 'settingsModal') {
        document.getElementById('settingsModal').classList.add('hidden');
      }
    });

    // Settings Form Submit
    document.getElementById('settingsForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const settings = Object.fromEntries(formData.entries());
      
      const submitBtn = e.target.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      
      submitBtn.disabled = true;
      submitBtn.textContent = '💾 Saving...';
      
      try {
        const res = await fetch('/api/settings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(settings)
        });
        
        const data = await res.json();
        
        if (data.ok) {
          showToast('✅ Settings saved successfully!', 'success');
          document.getElementById('settingsModal').classList.add('hidden');
          
          // Refresh page after a short delay to apply new settings
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showToast('❌ Failed to save settings: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });

    async function fetchMedia(){
      const res = await fetch('/media');
      const data = await res.json();
      const grid = document.getElementById('grid');
      const emptyState = document.getElementById('emptyState');
      
      // Create a state signature to compare with last render
      const currentState = {
        itemCount: data.items ? data.items.length : 0,
        currentPlaying: currentPlayingPath,
        items: data.items ? data.items.map(item => ({
          path: item.path,
          filename: item.filename
        })) : []
      };
      
      // Check if state has actually changed
      if (lastMediaGridState && 
          lastMediaGridState.itemCount === currentState.itemCount &&
          lastMediaGridState.currentPlaying === currentState.currentPlaying &&
          JSON.stringify(lastMediaGridState.items) === JSON.stringify(currentState.items)) {
        // No changes, just update active states without full re-render
        updateActiveStatesOnly();
        return;
      }
      
      // Store new state
      lastMediaGridState = currentState;
      
      grid.innerHTML = '';
      
      if (!data.items || data.items.length === 0) {
        emptyState.classList.remove('hidden');
        return;
      }
      
      emptyState.classList.add('hidden');
      
      for(const item of data.items){
        const div = document.createElement('div');
        const isCurrentlyPlaying = currentPlayingPath === item.path;
        
        let cardClasses = 'bg-dark-800 border-2 rounded-2xl p-4 cursor-pointer transition-all transform touch-manipulation relative';
        
        if (isCurrentlyPlaying) {
          cardClasses += ' border-green-500 bg-green-900/20';
        } else {
          cardClasses += ' border-dark-700 hover:border-blue-500 hover:bg-dark-750 hover:scale-105';
        }
        
        div.className = cardClasses;
        div.setAttribute('data-act', item.type === 'video' ? 'play' : 'show');
        div.setAttribute('data-path', item.path);
        div.setAttribute('data-type', item.type);
        
        const typeIcon = item.type === 'video' ? '<svg class="icon icon-sm inline"><use href="#icon-video"></use></svg>' : '<svg class="icon icon-sm inline"><use href="#icon-image"></use></svg>';
        
        div.innerHTML = `
          <div class="relative mb-4">
            <img class="w-full h-44 object-cover rounded-xl bg-dark-700" src="${item.url}" alt="thumbnail" loading="lazy"/>
            <div class="absolute top-2 left-2 bg-dark-900/90 backdrop-blur-sm text-white px-2 py-1 rounded-lg text-xs font-medium flex items-center gap-1">
              ${typeIcon} ${item.type.toUpperCase()}
            </div>
            ${item.type === 'video' && item.durationFormatted ? `
              <div class="absolute bottom-2 right-2 bg-dark-900/90 backdrop-blur-sm text-white px-2 py-1 rounded-lg text-xs font-medium">
                <svg class="icon icon-sm inline mr-1"><use href="#icon-play"></use></svg> ${item.durationFormatted}
              </div>
            ` : ''}
            ${isCurrentlyPlaying ? `
              <div class="absolute top-2 right-2 bg-red-600/90 backdrop-blur-sm text-white px-2 py-1 rounded-lg text-xs font-medium flex items-center gap-1">
                <div class="w-2 h-2 bg-red-300 rounded-full animate-pulse"></div>
                LIVE
              </div>
            ` : ''}
          </div>
          <div class="text-center">
            <h4 class="text-white font-medium text-sm mb-1 truncate" title="${item.filename}">${item.filename}</h4>
          </div>
        `;
        grid.appendChild(div);
      }
    }
    
    // Function to update only active states without full re-render
    function updateActiveStatesOnly() {
      const grid = document.getElementById('grid');
      const cards = grid.querySelectorAll('[data-path]');
      
      cards.forEach(card => {
        const cardPath = card.getAttribute('data-path');
        const isCurrentlyPlaying = currentPlayingPath === cardPath;
        
        // Update classes without full re-render
        if (isCurrentlyPlaying) {
          if (!card.classList.contains('border-green-500')) {
            card.className = 'bg-dark-800 border-2 rounded-2xl p-4 cursor-pointer transition-all transform touch-manipulation relative border-green-500 bg-green-900/20';
            
            // Add LIVE badge if not exists
            const liveBadge = card.querySelector('.bg-red-600\\/90');
            if (!liveBadge) {
              const imgContainer = card.querySelector('.relative.mb-4');
              if (imgContainer) {
                const liveBadgeHTML = `
                  <div class="absolute top-2 right-2 bg-red-600/90 backdrop-blur-sm text-white px-2 py-1 rounded-lg text-xs font-medium flex items-center gap-1">
                    <div class="w-2 h-2 bg-red-300 rounded-full animate-pulse"></div>
                    LIVE
                  </div>
                `;
                imgContainer.insertAdjacentHTML('beforeend', liveBadgeHTML);
              }
            }
          }
        } else {
          if (card.classList.contains('border-green-500')) {
            card.className = 'bg-dark-800 border-2 rounded-2xl p-4 cursor-pointer transition-all transform touch-manipulation relative border-dark-700 hover:border-blue-500 hover:bg-dark-750 hover:scale-105';
            
            // Remove LIVE badge
            const liveBadge = card.querySelector('.bg-red-600\\/90');
            if (liveBadge) {
              liveBadge.remove();
            }
          }
        }
      });
    }

    // Use event delegation on the parent grid (only set once)
    document.getElementById('grid').addEventListener('click', async (e)=>{
      const card = e.target.closest('[data-act]');
      if(!card) return;
      
      // Prevent double clicks
      if(card.classList.contains('processing')) return;
      
      card.classList.add('processing');
      
      const filePath = card.getAttribute('data-path');
      const act = card.getAttribute('data-act');
      const endpoint = act==='play' ? '/play/video' : '/show/image';
      
      try {
        const res = await fetch(endpoint, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ filePath }) });
        const j = await res.json();
        if(!j.ok) {
          showToast('❌ Failed: ' + (j.error || 'unknown'), 'error');
        } else {
          // Update current playing state
          currentPlayingPath = filePath;
          currentPlayingType = card.getAttribute('data-type');
          
          // If it's a video, show the video name and update local state
          if (currentPlayingType === 'video') {
            const videoName = card.querySelector('h4').textContent;
            document.getElementById('currentVideoName').textContent = videoName;
            
            // Set button to pause state immediately when video starts playing
            const playPauseIcon = document.getElementById('playPauseIcon');
            const playPauseText = document.getElementById('playPauseText');
            const playPauseBtn = document.getElementById('playPauseBtn');
            playPauseIcon.innerHTML = '<use href="#icon-pause"></use>';
            playPauseText.textContent = "Pause";
            playPauseBtn.setAttribute('data-action', 'pause');
            
            // WebSocket will handle progress updates automatically
          } else {
            // Hide progress bar for non-video content (images, etc.)
            hideProgressBar();
          }
          
          // WebSocket will handle state updates automatically
          // No need for manual refresh calls
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        card.classList.remove('processing');
      }
    });

    // Video control event listeners
    document.getElementById('playPauseBtn').addEventListener('click', async () => {
      const btn = document.getElementById('playPauseBtn');
      const action = btn.getAttribute('data-action') || 'pause';
      
      if (btn.disabled) return;
      btn.disabled = true;
      
      try {
        let endpoint, requestAction;
        
        // If action is 'play' and video was stopped, use restart instead
        if (action === 'play') {
          // Check current video state
          const progressRes = await fetch('/obs/progress');
          const progressData = await progressRes.json();
          
          if (progressData.ok && progressData.mediaState === 'OBS_MEDIA_STATE_STOPPED') {
            // Video is stopped, use restart to start from beginning
            requestAction = 'restart';
            endpoint = '/obs/control';
          } else {
            // Video is paused, just resume
            requestAction = 'play';
            endpoint = '/obs/control';
          }
        } else {
          // Normal pause action
          requestAction = action;
          endpoint = '/obs/control';
        }
        
        const res = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: requestAction })
        });
        
        const data = await res.json();
        if (data.ok) {
          // WebSocket will handle progress updates automatically
          // No need for manual progress checks
        } else {
          showToast('❌ Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
      }
    });

    document.getElementById('restartBtn').addEventListener('click', async () => {
      const btn = document.getElementById('restartBtn');
      
      if (btn.disabled) return;
      btn.disabled = true;
      
      try {
        const res = await fetch('/obs/control', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'restart' })
        });
        
        const data = await res.json();
        if (data.ok) {
          // WebSocket will handle progress updates automatically
          // No need for manual progress checks
        } else {
          showToast('❌ Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
      }
    });

    // Video stop button event listener
    document.getElementById('stopBtn').addEventListener('click', async () => {
      const btn = document.getElementById('stopBtn');
      
      if (btn.disabled) return;
      btn.disabled = true;
      
      try {
        const res = await fetch('/stop/all', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' }
        });
        
        const data = await res.json();
        if (data.ok) {
          // Clear current playing state
          currentPlayingPath = null;
          currentPlayingType = null;
          
          // Hide progress bar
          hideProgressBar();
          
          // WebSocket will handle the state updates automatically
          // No need for manual updates
        } else {
          showToast('❌ Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
      }
    });

    // Track last known current time for continuous seeking
    let lastKnownCurrentTime = 0;
    
    // Update last known time from progress updates
    function updateLastKnownTime(currentTimeMs) {
      if (currentTimeMs !== undefined && currentTimeMs !== null) {
        lastKnownCurrentTime = currentTimeMs;
      }
    }

    // Seek backward 10 seconds
    document.getElementById('seekBackBtn').addEventListener('click', async () => {
      const btn = document.getElementById('seekBackBtn');
      
      if (!obsConnected || currentPlayingType !== 'video') {
        showToast('❌ No video playing', 'error');
        return;
      }
      
      if (btn.disabled) return;
      btn.disabled = true;
      
      try {
        // Use last known time and subtract 10 seconds
        const seekTimeMs = Math.max(0, lastKnownCurrentTime - 10000);
        
        const res = await fetch('/obs/seek', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ timeMs: seekTimeMs })
        });
        
        const data = await res.json();
        if (data.ok) {
          // Update our tracking time immediately
          lastKnownCurrentTime = seekTimeMs;
          
          // WebSocket will handle progress updates automatically
          // No need for manual progress checks
        } else {
          showToast('❌ Failed to seek: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
      }
    });

    // Seek forward 10 seconds
    document.getElementById('seekForwardBtn').addEventListener('click', async () => {
      const btn = document.getElementById('seekForwardBtn');
      
      if (!obsConnected || currentPlayingType !== 'video') {
        showToast('❌ No video playing', 'error');
        return;
      }
      
      if (btn.disabled) return;
      btn.disabled = true;
      
      try {
        // Use last known time and add 10 seconds
        const seekTimeMs = lastKnownCurrentTime + 10000;
        
        const res = await fetch('/obs/seek', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ timeMs: seekTimeMs })
        });
        
        const data = await res.json();
        if (data.ok) {
          // Update our tracking time immediately
          lastKnownCurrentTime = seekTimeMs;
          
          // WebSocket will handle progress updates automatically
          // No need for manual progress checks
        } else {
          showToast('❌ Failed to seek: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('❌ Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
      }
    });

    // Toast notification system
    function showToast(message, type = 'info') {
      const toast = document.createElement('div');
      toast.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg font-medium text-sm transition-all transform translate-x-full opacity-0 ${
        type === 'error' ? 'bg-red-600 text-white' : 'bg-green-600 text-white'
      }`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      
      // Animate in
      setTimeout(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
      }, 100);
      
      // Animate out after 3 seconds
      setTimeout(() => {
        toast.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    // Apply localStorage settings on page load
    applyLocalStorageSettings();
    
    // Load progress bar collapse state from localStorage
    const savedCollapseState = localStorage.getItem('progressBarCollapsed');
    if (savedCollapseState === 'true') {
      progressBarCollapsed = true;
    }
    
    // Progress bar collapse/expand event listeners
    document.getElementById('collapseBtn').addEventListener('click', () => {
      collapseProgressBar();
    });
    
    document.getElementById('expandBtn').addEventListener('click', () => {
      expandProgressBar();
    });
    
    // Setup progress bar seek functionality using event delegation
    document.addEventListener('click', handleProgressBarClick);
    
    // Fix iOS hover state persistence
    function resetHoverStates() {
      // Remove any stuck hover states on iOS
      const buttons = document.querySelectorAll('button');
      buttons.forEach(button => {
        button.blur(); // Remove focus
        // Force a reflow to reset hover states
        button.style.transform = 'scale(1)';
        setTimeout(() => {
          button.style.transform = '';
        }, 10);
      });
    }
    
    // Add touch event listeners to reset hover states on iOS
    if ('ontouchstart' in window) {
      document.addEventListener('touchend', () => {
        setTimeout(resetHoverStates, 100);
      });
      
      // Specifically handle video control buttons
      const videoControlButtons = document.querySelectorAll('#progressContainer button');
      videoControlButtons.forEach(button => {
        button.addEventListener('touchend', () => {
          setTimeout(() => {
            button.blur();
            button.classList.remove('hover');
          }, 100);
        });
      });
    }
    
    // Touch drag functionality for progress bar
    let isDragging = false;
    let dragStartX = 0;
    let pendingSeekTimeMs = null;
    
    function updateProgressBarVisual(clientX) {
      if (!obsConnected || currentPlayingType !== 'video') {
        return;
      }
      
      const progressBarContainer = document.getElementById('progressBarContainer');
      if (!progressBarContainer) return;
      
      // Get current video status to know total duration
      fetch('/obs/progress')
        .then(res => res.json())
        .then(data => {
          if (data.ok && data.mediaDuration > 0) {
            const rect = progressBarContainer.getBoundingClientRect();
            if (!rect || rect.width === 0) return;
            
            const seekX = clientX - rect.left;
            const percentage = Math.max(0, Math.min(1, seekX / rect.width));
            const seekTimeMs = Math.floor(percentage * data.mediaDuration);
            
            // Store the time we want to seek to
            pendingSeekTimeMs = seekTimeMs;
            
            // Update progress bar immediately for visual feedback only
            const progressBar = document.getElementById('progressBar');
            const progressThumb = document.getElementById('progressThumb');
            if (progressBar) {
              // Ensure container maintains its background styling (iOS fix)
              progressBarContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.4)';
              progressBarContainer.style.borderRadius = '9999px';
              progressBarContainer.classList.remove('bg-dark-700');
              
              // Update thumb position during drag
              const containerWidth = progressBarContainer.offsetWidth;
              // Match thumb size with progress bar height - responsive
              const progressBarHeight = document.getElementById('progressBar')?.offsetHeight || 24;
              const thumbSize = progressBarHeight;
              const thumbPosition = Math.max(thumbSize/2, Math.min(containerWidth - thumbSize/2, percentage * containerWidth));
              
              // Progress bar width extends to the right edge of the thumb
              const thumbRightEdge = thumbPosition + thumbSize/2;
              const progressWidth = (thumbRightEdge / containerWidth) * 100;
              progressBar.style.width = `${Math.min(progressWidth, 100)}%`;
              
              if (progressThumb) {
                progressThumb.style.left = `${thumbPosition - thumbSize/2}px`;
                progressThumb.style.position = 'absolute';
                progressThumb.style.zIndex = '10';
              }
            }
            
            // Update time display for visual feedback
            const timeDisplay = document.getElementById('timeDisplay');
            const timeDisplayCollapsed = document.getElementById('timeDisplayCollapsed');
            if (timeDisplay) {
              const seekTimeSeconds = Math.floor(seekTimeMs / 1000);
              const totalTimeSeconds = Math.floor(data.mediaDuration / 1000);
              timeDisplay.textContent = `${formatTime(seekTimeSeconds)} / ${formatTime(totalTimeSeconds)}`;
            }
            if (timeDisplayCollapsed) {
              const seekTimeSeconds = Math.floor(seekTimeMs / 1000);
              timeDisplayCollapsed.textContent = formatTime(seekTimeSeconds);
            }
          }
        })
        .catch(error => {
          console.error('Progress fetch error:', error);
        });
    }
    
    function performSeek() {
      if (pendingSeekTimeMs === null) return;
      
      const seekTimeMs = pendingSeekTimeMs;
      pendingSeekTimeMs = null;
      
      // Perform the actual seek
      fetch('/obs/seek', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ timeMs: seekTimeMs })
      })
      .then(res => res.json())
      .then(seekData => {
        if (seekData.ok) {
          // Reinforce progress bar styling after seek (iOS fix)
          setTimeout(() => {
            reinforceProgressBarStyling();
          }, 100);
          
          // WebSocket will handle progress updates automatically
          // No need for manual progress checks
        } else {
          showToast('❌ Failed to seek: ' + (seekData.error || 'unknown'), 'error');
          // WebSocket will continue to provide current progress
        }
      })
      .catch(error => {
        console.error('Seek error:', error);
        showToast('❌ Seek error: ' + error.message, 'error');
        // WebSocket will continue to provide current progress
      });
    }
    
    // Mouse events for drag
    document.addEventListener('mousedown', (e) => {
      const progressBarContainer = e.target.closest('#progressBarContainer');
      if (progressBarContainer) {
        isDragging = true;
        dragStartX = e.clientX;
        pendingSeekTimeMs = null;
        document.body.style.userSelect = 'none'; // Prevent text selection
        e.preventDefault();
      }
    });
    
    document.addEventListener('mousemove', (e) => {
      if (isDragging) {
        updateProgressBarVisual(e.clientX);
        e.preventDefault();
      }
    });
    
    document.addEventListener('mouseup', () => {
      if (isDragging) {
        isDragging = false;
        document.body.style.userSelect = '';
        // Perform seek only after mouse up
        performSeek();
      }
    });
    
    // Touch events for mobile drag
    document.addEventListener('touchstart', (e) => {
      const progressBarContainer = e.target.closest('#progressBarContainer');
      if (progressBarContainer) {
        isDragging = true;
        const touch = e.touches[0];
        dragStartX = touch.clientX;
        pendingSeekTimeMs = null;
        e.preventDefault();
      }
    }, { passive: false });
    
    document.addEventListener('touchmove', (e) => {
      if (isDragging) {
        const touch = e.touches[0];
        updateProgressBarVisual(touch.clientX);
        e.preventDefault();
      }
    }, { passive: false });
    
    document.addEventListener('touchend', () => {
      if (isDragging) {
        isDragging = false;
        // Perform seek only after touch end
        performSeek();
      }
    });
    
    fetchMedia();
    
    // Fetch current playing media on startup (this will also refresh media grid if needed)
    setTimeout(() => {
      fetchCurrentPlaying();
    }, 500); // Delay slightly to ensure media is loaded first
    
    // Function to reinforce progress bar styling (iOS fix)
    function reinforceProgressBarStyling() {
      const progressBarContainer = document.getElementById('progressBarContainer');
      if (progressBarContainer) {
        progressBarContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.4)';
        progressBarContainer.style.borderRadius = '9999px';
        progressBarContainer.classList.remove('bg-dark-700');
        
        // Also ensure the Tailwind classes are maintained
        if (!progressBarContainer.classList.contains('w-full')) {
          progressBarContainer.classList.add('w-full', 'rounded-full', 'cursor-pointer', 'relative', 'transition-all', 'duration-200', 'group');
        }
      }
      
      // Ensure thumb z-index is maintained
      const progressThumb = document.getElementById('progressThumb');
      if (progressThumb) {
        progressThumb.style.zIndex = '10';
        progressThumb.style.position = 'absolute';
      }
      
      // Ensure progress bar z-index
      const progressBar = document.getElementById('progressBar');
      if (progressBar) {
        progressBar.style.zIndex = '1';
        progressBar.style.position = 'relative';
      }
    }
    
    // Call reinforcement on page load
    setTimeout(reinforceProgressBarStyling, 100);
    
    // Reinforce styling after any touch event on iOS
    if ('ontouchstart' in window) {
      document.addEventListener('touchend', () => {
        setTimeout(reinforceProgressBarStyling, 50);
      });
    }
    
    // Initial OBS status check
    checkOBSStatus();
    
    // Auto refresh scenes every 5 seconds when OBS is connected (reduced frequency since WebSocket handles real-time updates)
    setInterval(() => {
      if (obsConnected) {
        loadScenes();
      }
    }, 5000);
    
    // WebSocket now handles real-time updates, no need for periodic polling
    // Initial media load
    fetchMedia();
    
    // WebSocket handles real-time updates automatically
    // Initial status will be received via WebSocket events
  </script>
</body>
</html>
