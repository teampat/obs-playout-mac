<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      darkMode: 'class',
      theme: {
        extend: {
          colors: {
            dark: {
              50: '#f8fafc',
              100: '#f1f5f9',
              200: '#e2e8f0',
              300: '#cbd5e1',
              400: '#94a3b8',
              500: '#64748b',
              600: '#475569',
              700: '#334155',
              800: '#1e293b',
              900: '#0f172a',
            }
          }
        }
      }
    }
  </script>
  <style>
    /* Custom animations and touch optimizations */
    .animate-press {
      transition: transform 0.1s ease;
    }
    .animate-press:active {
      transform: scale(0.95);
    }
    
    /* Smooth transitions */
    * {
      transition: background-color 0.2s ease, border-color 0.2s ease, color 0.2s ease;
    }
    
    /* Loading animation */
    .loading-spin {
      animation: spin 1s linear infinite;
    }
    
    .border-3 {
      border-width: 3px;
    }
    
    @keyframes spin {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }
    
    @keyframes pulse {
      0%, 100% { opacity: 1; }
      50% { opacity: 0.5; }
    }
    
    .animate-pulse {
      animation: pulse 1.5s infinite;
    }
    
    /* Card hover effects */
    .bg-dark-750 {
      background-color: rgb(41 50 65);
    }
  </style>
</head>
<body class="dark bg-dark-900 text-white min-h-screen">
  <div class="container mx-auto px-4 py-6 max-w-7xl">
    <%- include('partials/header') %>

    <!-- OBS Controls Section -->
    <section class="mb-8">
      <h3 class="text-lg font-semibold mb-4 text-white flex items-center gap-2">
        üéõÔ∏è OBS Controls
      </h3>
      <button id="stopAllBtn" class="animate-press bg-red-600 hover:bg-red-700 disabled:opacity-60 disabled:cursor-not-allowed text-white font-medium px-6 py-3 rounded-lg text-base min-h-12 transition-all touch-manipulation">
        ‚èπ Stop All Sources
      </button>
    </section>

    <!-- Library Section -->
    <section>
      <h3 class="text-lg font-semibold mb-6 text-white flex items-center gap-2">
        üìö Media Library
      </h3>
      <div id="grid" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6">
        <!-- Media items will be inserted here -->
      </div>
      
      <!-- Empty State -->
      <div id="emptyState" class="hidden text-center py-12">
        <div class="text-6xl mb-4">üìÇ</div>
        <h3 class="text-xl font-medium text-dark-300 mb-2">No media files found</h3>
        <p class="text-dark-400">Add video or image files to your media directory to get started.</p>
      </div>
    </section>
  </div>

  <!-- Settings Modal -->
  <div id="settingsModal" class="fixed inset-0 bg-black bg-opacity-50 z-50 hidden flex items-center justify-center p-4">
    <div class="bg-dark-800 rounded-2xl p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
      <div class="flex items-center justify-between mb-6">
        <h2 class="text-xl font-bold text-white">‚öôÔ∏è Application Settings</h2>
        <button id="closeSettingsBtn" class="text-gray-400 hover:text-white text-2xl">&times;</button>
      </div>
      
      <form id="settingsForm" class="space-y-4">
        <div class="grid grid-cols-1 gap-4">
          <!-- Media Directory -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">üìÅ Media Directory</label>
            <input type="text" id="mediaDir" name="MEDIA_DIR" required
                   class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
                   placeholder="/path/to/media/folder">
            <small class="text-gray-400 text-xs mt-1 block">Local directory where media files are stored</small>
          </div>
          
          <!-- OBS Settings -->
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">üé• OBS WebSocket URL</label>
            <input type="text" id="obsUrl" name="OBS_URL" required placeholder="ws://127.0.0.1:4455"
                   class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none">
            <small class="text-gray-400 text-xs mt-1 block">OBS WebSocket server address</small>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-300 mb-2">üîí OBS Password</label>
            <input type="password" id="obsPassword" name="OBS_PASSWORD" 
                   class="w-full px-3 py-2 bg-dark-700 border border-dark-600 rounded-lg text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none"
                   placeholder="Leave blank if no password">
            <small class="text-gray-400 text-xs mt-1 block">OBS WebSocket password (optional)</small>
          </div>
        </div>
        
        <div class="flex gap-3 pt-4">
          <button type="submit" class="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-all">
            üíæ Save Settings
          </button>
          <button type="button" id="cancelSettingsBtn" class="bg-gray-600 hover:bg-gray-700 text-white font-medium py-3 px-4 rounded-lg transition-all">
            ‚ùå Cancel
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Global state tracking
    let currentPlayingPath = null;
    let currentPlayingType = null;
    let obsConnected = false;

    // LocalStorage Settings Management
    const LOCAL_STORAGE_KEYS = ['MEDIA_DIR', 'OBS_URL', 'OBS_PASSWORD', 'OBS_TARGET_SCENE'];
    
    function saveToLocalStorage(settings) {
      LOCAL_STORAGE_KEYS.forEach(key => {
        if (settings[key] !== undefined) {
          localStorage.setItem(key, settings[key]);
        }
      });
    }
    
    function loadFromLocalStorage() {
      const settings = {};
      LOCAL_STORAGE_KEYS.forEach(key => {
        const value = localStorage.getItem(key);
        if (value) {
          settings[key] = value;
        }
      });
      return settings;
    }
    
    // Apply localStorage settings on page load
    async function applyLocalStorageSettings() {
      const localSettings = loadFromLocalStorage();
      if (Object.keys(localSettings).length > 0) {
        try {
          await fetch('/api/settings/localStorage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(localSettings)
          });
        } catch (error) {
          console.log('Failed to apply localStorage settings:', error);
        }
      }
    }

    // OBS Status Functions
    async function checkOBSStatus() {
      try {
        const res = await fetch('/obs/status');
        const data = await res.json();
        updateOBSStatus(data.connected);
      } catch (error) {
        updateOBSStatus(false);
      }
    }

    function updateOBSStatus(connected) {
      obsConnected = connected;
      const indicator = document.getElementById('obsIndicator');
      const statusText = document.getElementById('obsStatusText');
      const connectBtn = document.getElementById('obsConnectBtn');
      const disconnectBtn = document.getElementById('obsDisconnectBtn');
      const sceneSelector = document.getElementById('sceneSelector');
      
      if (connected) {
        indicator.className = 'w-2 h-2 rounded-full bg-green-500 animate-pulse';
        statusText.textContent = 'OBS Connected';
        statusText.className = 'text-green-400';
        connectBtn.classList.add('hidden');
        disconnectBtn.classList.remove('hidden');
        sceneSelector.classList.remove('hidden');
        
        // Load scenes when connected
        loadScenes();
      } else {
        indicator.className = 'w-2 h-2 rounded-full bg-red-500';
        statusText.textContent = 'OBS Disconnected';
        statusText.className = 'text-red-400';
        connectBtn.classList.remove('hidden');
        connectBtn.textContent = 'üîå Connect to OBS';
        disconnectBtn.classList.add('hidden');
        sceneSelector.classList.add('hidden');
        
        // Clear scene options when disconnected
        const targetScene = document.getElementById('targetScene');
        if (targetScene) {
          targetScene.innerHTML = '<option value="">Select scene...</option>';
        }
      }
    }

    // Connect to OBS
    document.getElementById('obsConnectBtn').addEventListener('click', async () => {
      const btn = document.getElementById('obsConnectBtn');
      const originalText = btn.textContent;
      
      btn.disabled = true;
      btn.textContent = 'üîÑ Connecting...';
      
      try {
        const res = await fetch('/obs/connect', { method: 'POST' });
        const data = await res.json();
        
        if (data.ok) {
          showToast('‚úÖ ' + data.message, 'success');
          checkOBSStatus(); // Refresh status
        } else {
          showToast('‚ùå Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('‚ùå Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
        btn.textContent = originalText;
      }
    });

    // Disconnect from OBS
    document.getElementById('obsDisconnectBtn').addEventListener('click', async () => {
      const btn = document.getElementById('obsDisconnectBtn');
      const originalText = btn.textContent;
      
      btn.disabled = true;
      btn.textContent = 'üîÑ Disconnecting...';
      
      try {
        const res = await fetch('/obs/disconnect', { method: 'POST' });
        const data = await res.json();
        
        if (data.ok) {
          showToast('‚úÖ ' + data.message, 'success');
          checkOBSStatus(); // Refresh status
        } else {
          showToast('‚ùå Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('‚ùå Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
        btn.textContent = originalText;
      }
    });

    // Check OBS status periodically
    setInterval(checkOBSStatus, 5000); // Check every 5 seconds

    // Scene selector change handler
    document.getElementById('targetScene').addEventListener('change', async (e) => {
      const selectedScene = e.target.value;
      if (selectedScene) {
        // Save to localStorage
        localStorage.setItem('OBS_TARGET_SCENE', selectedScene);
        
        try {
          // Update server CONFIG
          const res = await fetch('/api/settings/localStorage', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ OBS_TARGET_SCENE: selectedScene })
          });
          
          const data = await res.json();
          if (data.ok) {
            if (selectedScene === 'CURRENT_SCENE') {
              showToast('üé¨ Target scene set to: Current Scene', 'success');
            } else {
              showToast(`üé¨ Target scene set to: ${selectedScene}`, 'success');
            }
          } else {
            showToast('‚ùå Failed to update target scene on server', 'error');
          }
        } catch (error) {
          console.error('Error updating target scene:', error);
          showToast('‚ùå Network error updating target scene', 'error');
        }
      }
    });

    // Settings Modal Functions
    const settingsModal = document.getElementById('settingsModal');
    const settingsForm = document.getElementById('settingsForm');
    
    document.getElementById('settingsBtn').addEventListener('click', async () => {
      await loadSettings();
      settingsModal.classList.remove('hidden');
    });

    document.getElementById('closeSettingsBtn').addEventListener('click', () => {
      settingsModal.classList.add('hidden');
    });

    document.getElementById('cancelSettingsBtn').addEventListener('click', () => {
      settingsModal.classList.add('hidden');
    });

    // Close modal when clicking outside
    settingsModal.addEventListener('click', (e) => {
      if (e.target === settingsModal) {
        settingsModal.classList.add('hidden');
      }
    });

    // Save settings
    settingsForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(settingsForm);
      const settings = {};
      
      for (let [key, value] of formData.entries()) {
        settings[key] = value;
      }
      
      const submitBtn = settingsForm.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      submitBtn.disabled = true;
      submitBtn.textContent = 'üíæ Saving...';
      
      try {
        const res = await fetch('/api/settings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(settings)
        });
        
        const data = await res.json();
        
        if (data.ok) {
          // Save localStorage settings to browser
          if (data.localStorageSettings) {
            saveToLocalStorage(data.localStorageSettings);
          }
          
          showToast('‚úÖ Settings saved successfully!', 'success');
          settingsModal.classList.add('hidden');
          
          // Refresh page after 2 seconds to apply new settings
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showToast('‚ùå Failed: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('‚ùå Network error: ' + error.message, 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });

    // Settings Modal Functions
    async function loadSettings() {
      try {
        const res = await fetch('/api/settings');
        const data = await res.json();
        
        if (data.ok) {
          const settings = data.settings;
          document.getElementById('mediaDir').value = settings.MEDIA_DIR || '';
          document.getElementById('obsUrl').value = settings.OBS_URL || '';
          document.getElementById('obsPassword').value = settings.OBS_PASSWORD || '';
        }
      } catch (error) {
        showToast('‚ùå Failed to load settings: ' + error.message, 'error');
      }
    }

    async function loadScenes() {
      try {
        const res = await fetch('/obs/scenes');
        const data = await res.json();
        
        if (data.ok) {
          const targetScene = document.getElementById('targetScene');
          const currentValue = localStorage.getItem('OBS_TARGET_SCENE') || '';
          
          // Clear existing options and add "Current Scene" as default
          targetScene.innerHTML = `<option value="CURRENT_SCENE">üì∫ Current Scene (${data.currentScene})</option>`;

          // Set default selection if no saved value
          if (!currentValue) {
            targetScene.value = 'CURRENT_SCENE';
          }

          // Add scene options
          data.scenes.forEach(scene => {
            const option = document.createElement('option');
            option.value = scene.name;
            option.textContent = scene.name;
            if (scene.name === currentValue) {
              option.selected = true;
            }
            targetScene.appendChild(option);
          });
          
          // Scene is already saved to localStorage, no need to update CONFIG here
        } else {
          console.error('Failed to load scenes:', data.error);
        }
      } catch (error) {
        console.error('Error loading scenes:', error);
      }
    }

    // Settings Modal Event Listeners
    document.getElementById('settingsBtn').addEventListener('click', () => {
      loadSettings();
      document.getElementById('settingsModal').classList.remove('hidden');
    });

    document.getElementById('closeSettingsBtn').addEventListener('click', () => {
      document.getElementById('settingsModal').classList.add('hidden');
    });

    document.getElementById('cancelSettingsBtn').addEventListener('click', () => {
      document.getElementById('settingsModal').classList.add('hidden');
    });

    // Close modal when clicking outside
    document.getElementById('settingsModal').addEventListener('click', (e) => {
      if (e.target.id === 'settingsModal') {
        document.getElementById('settingsModal').classList.add('hidden');
      }
    });

    // Settings Form Submit
    document.getElementById('settingsForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(e.target);
      const settings = Object.fromEntries(formData.entries());
      
      const submitBtn = e.target.querySelector('button[type="submit"]');
      const originalText = submitBtn.textContent;
      
      submitBtn.disabled = true;
      submitBtn.textContent = 'üíæ Saving...';
      
      try {
        const res = await fetch('/api/settings', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(settings)
        });
        
        const data = await res.json();
        
        if (data.ok) {
          showToast('‚úÖ Settings saved successfully!', 'success');
          document.getElementById('settingsModal').classList.add('hidden');
          
          // Refresh page after a short delay to apply new settings
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showToast('‚ùå Failed to save settings: ' + (data.error || 'unknown'), 'error');
        }
      } catch (error) {
        showToast('‚ùå Network error: ' + error.message, 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalText;
      }
    });

    async function fetchMedia(){
      const res = await fetch('/media');
      const data = await res.json();
      const grid = document.getElementById('grid');
      const emptyState = document.getElementById('emptyState');
      
      grid.innerHTML = '';
      
      if (!data.items || data.items.length === 0) {
        emptyState.classList.remove('hidden');
        return;
      }
      
      emptyState.classList.add('hidden');
      
      for(const item of data.items){
        const div = document.createElement('div');
        const isCurrentlyPlaying = currentPlayingPath === item.path;
        
        let cardClasses = 'bg-dark-800 border-2 rounded-2xl p-4 cursor-pointer transition-all transform touch-manipulation';
        
        if (isCurrentlyPlaying) {
          cardClasses += ' border-green-500 bg-green-900/20';
        } else {
          cardClasses += ' border-dark-700 hover:border-blue-500 hover:bg-dark-750 hover:scale-105';
        }
        
        div.className = cardClasses;
        div.setAttribute('data-act', item.type === 'video' ? 'play' : 'show');
        div.setAttribute('data-path', item.path);
        div.setAttribute('data-type', item.type);
        
        const typeIcon = item.type === 'video' ? 'üé¨' : 'üñºÔ∏è';
        
        div.innerHTML = `
          <div class="relative mb-4">
            <img class="w-full h-44 object-cover rounded-xl bg-dark-700" src="${item.url}" alt="thumbnail" loading="lazy"/>
            <div class="absolute top-2 left-2 bg-dark-900/90 backdrop-blur-sm text-white px-2 py-1 rounded-lg text-xs font-medium">
              ${typeIcon} ${item.type.toUpperCase()}
            </div>
            ${isCurrentlyPlaying ? `
              <div class="absolute top-2 right-2 bg-red-600/90 backdrop-blur-sm text-white px-2 py-1 rounded-lg text-xs font-medium flex items-center gap-1">
                <div class="w-2 h-2 bg-red-300 rounded-full animate-pulse"></div>
                LIVE
              </div>
            ` : ''}
          </div>
          <div class="text-center">
            <h4 class="text-white font-medium text-sm mb-1 truncate" title="${item.filename}">${item.filename}</h4>
          </div>
        `;
        grid.appendChild(div);
      }
    }

    // Use event delegation on the parent grid (only set once)
    document.getElementById('grid').addEventListener('click', async (e)=>{
      const card = e.target.closest('[data-act]');
      if(!card) return;
      
      // Prevent double clicks
      if(card.classList.contains('processing')) return;
      
      card.classList.add('processing');
      
      const filePath = card.getAttribute('data-path');
      const act = card.getAttribute('data-act');
      const endpoint = act==='play' ? '/play/video' : '/show/image';
      
      try {
        const res = await fetch(endpoint, { method:'POST', headers:{'Content-Type':'application/json'}, body: JSON.stringify({ filePath }) });
        const j = await res.json();
        if(!j.ok) {
          showToast('‚ùå Failed: ' + (j.error || 'unknown'), 'error');
        } else {
          // Update current playing state
          currentPlayingPath = filePath;
          currentPlayingType = card.getAttribute('data-type');
          
          // Immediately refresh to show new states
          fetchMedia(); // Refresh to update all cards with current playing state
        }
      } catch (error) {
        showToast('‚ùå Network error: ' + error.message, 'error');
      } finally {
        card.classList.remove('processing');
      }
    });

    document.getElementById('stopAllBtn').addEventListener('click', async ()=>{
      const btn = document.getElementById('stopAllBtn');
      
      // Prevent double clicks
      if(btn.disabled) return;
      btn.disabled = true;
      
      try {
        const res = await fetch('/stop/all', { method:'POST' });
        const j = await res.json();
        if(!j.ok) {
          showToast('‚ùå Failed: ' + (j.error || 'unknown'), 'error');
        } else {
          // Clear current playing state
          currentPlayingPath = null;
          currentPlayingType = null;
          
          // Immediately refresh to update all cards (remove green borders)
          fetchMedia();
        }
      } catch (error) {
        showToast('‚ùå Network error: ' + error.message, 'error');
      } finally {
        btn.disabled = false;
      }
    });

    // Toast notification system
    function showToast(message, type = 'info') {
      const toast = document.createElement('div');
      toast.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg font-medium text-sm transition-all transform translate-x-full opacity-0 ${
        type === 'error' ? 'bg-red-600 text-white' : 'bg-green-600 text-white'
      }`;
      toast.textContent = message;
      
      document.body.appendChild(toast);
      
      // Animate in
      setTimeout(() => {
        toast.classList.remove('translate-x-full', 'opacity-0');
      }, 100);
      
      // Animate out after 3 seconds
      setTimeout(() => {
        toast.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }

    fetchMedia();
    
    // Initial OBS status check
    checkOBSStatus();
    
    // Auto refresh scenes every 1 second when OBS is connected
    setInterval(() => {
      if (obsConnected) {
        loadScenes();
      }
    }, 1000);
    
    // Apply localStorage settings on page load
    applyLocalStorageSettings();
  </script>
</body>
</html>
